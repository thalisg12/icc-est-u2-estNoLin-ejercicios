name: Evaluación de Pruebas

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Ejecutar pruebas y calcular nota
    runs-on: ubuntu-latest

    steps:
    - name: Clonar repositorio
      uses: actions/checkout@v3

    - name: Instalar Java
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Compilar archivos
      id: compilar
      continue-on-error: true
      run: |
        mkdir -p bin
        # Ejecutar compilación y capturar salida
        if javac -cp "lib/*" -d bin $(find src -name "*.java"); then
          echo "salida=0" >> $GITHUB_OUTPUT
        else
          echo "salida=1" >> $GITHUB_OUTPUT
        fi
      shell: bash
    
    - name: Guardar salida como output
      id: output
      run: |
        echo "salida=$(cat salida.txt)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Verificar compilación
      if: env.salida == '1'
      run: |
        echo "::warning title=Error de compilación::El código no compiló. Revisa la sintaxis de tus clases."

        
        nombre=$(grep '^STUDENT_NAME=' student.env | cut -d '=' -f2 | xargs)
        correo=$(grep '^STUDENT_EMAIL=' student.env | cut -d '=' -f2 | xargs)

        USUARIO=$(echo "$correo" | cut -d '@' -f1)
        REPO=$(basename "$GITHUB_REPOSITORY")
        ARCHIVO="$USUARIO-$REPO.txt"

        echo "👤 Estudiante: $nombre" > "$ARCHIVO"
        echo "✉️ Correo: $correo" >> "$ARCHIVO"
        echo "❌ Error: No se pudo compilar el código" >> "$ARCHIVO"
        echo "📊 Nota final: 0 / 10" >> "$ARCHIVO"

        echo "ARCHIVO=$ARCHIVO" >> $GITHUB_ENV
    
    - name: Ejecutar pruebas
      if: env.salida == '0'
      continue-on-error: true
      run: |
        mkdir -p resultados
        java -jar lib/junit-platform-console-standalone-1.7.0.jar \
            --class-path bin \
            --scan-class-path \
            --details tree \
            --disable-ansi-colors \
            | tee resultados/salida.txt

    - name: Leer nombre y correo del estudiante desde App.java
      if: env.salida == '0'
      id: estudiante
      run: |
            nombre=$(grep '^STUDENT_NAME=' student.env | cut -d '=' -f2 | xargs)
            correo=$(grep '^STUDENT_EMAIL=' student.env | cut -d '=' -f2 | xargs)
            echo "nombre=$nombre" >> $GITHUB_OUTPUT
            echo "correo=$correo" >> $GITHUB_OUTPUT
    
    - name: Calcular nota y guardar en archivo
      if: env.salida == '0'
      run: |
        PASADAS=$(grep "tests successful" resultados/salida.txt | grep -oP '\[\s*\K\d+')
        FALLADAS=$(grep "tests failed" resultados/salida.txt | grep -oP '\[\s*\K\d+')




        if [ -z "$PASADAS" ]; then PASADAS=0; fi
        if [ -z "$FALLADAS" ]; then FALLADAS=0; fi
        TOTAL=$((PASADAS + FALLADAS))
        if [ "$TOTAL" -eq 0 ]; then TOTAL=4; fi
        NOTA=$(echo "$PASADAS * 2.5" | bc)

        USUARIO=$(echo "${{ steps.estudiante.outputs.correo }}" | cut -d '@' -f1)
        REPO=$(basename "$GITHUB_REPOSITORY")
        ARCHIVO="$USUARIO-$REPO.txt"

        echo "👤 Estudiante:${{ steps.estudiante.outputs.nombre }}" > "$ARCHIVO"
        echo "✉️ Correo: ${{ steps.estudiante.outputs.correo }}" >> "$ARCHIVO"
        echo "✅ $PASADAS de $TOTAL pruebas pasadas" >> "$ARCHIVO"
        echo "📊 Nota final: $NOTA / 10" >> "$ARCHIVO"
        
        echo "ARCHIVO=$ARCHIVO" >> $GITHUB_ENV
      
        # Mostrar nota como aviso visible en el resumen
        echo "::notice title=Nota Final::${{ steps.estudiante.outputs.nombre }} obtuvo $NOTA / 10 (${PASADAS} de ${TOTAL} pruebas)"


    - name: Subir archivo de resultado como artefacto
      if: env.salida == '0'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARCHIVO }}         
        path: ${{ env.ARCHIVO }}
